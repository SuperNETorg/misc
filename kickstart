#!/bin/bash

# Iguana Coin Synchronization Tool
# Usage: ./kickstart COIN

RTNUMBER=""
HEIGHT=""
SUPPORTED=(BTC BTCD DOGE LTC DGB GMC SYS MZC UNO ZET BTM CARB ANC FRK)
RESULTS=kickstart.log
COINLC=$(echo "$1" | tr '[:upper:]' '[:lower:]')

if [[ " ${SUPPORTED[@]} " =~ " $1 " ]]; then
    ps ax | grep -q "[i]guana coins/gen$COINLC.json" && { echo "Synchronization for $1 is already running! If you want to restart it, stop it and try again."; exit 1; }
    echo Starting $1 Synchronization.
else
    echo ">>> Argument error. Please run ./kickstart COIN"
    echo "Currently supported coins: BTC, BTCD, DOGE, LTC, DGB, GMC, SYS, MZC, UNO, ZET, BTM, CARB, ANC, FRK"
    exit 1
fi

echo WARNING: This will remove any existing DB and tmp sub-folders for $1 under the current working directory.
#read -p " >>> Start synchronization from scratch ? (y/n) " -n 1 -r
#if [[ ! $REPLY =~ ^[Yy]$ ]]; then
#    echo; exit 1
#fi

echo
rm -rf tmp/$1 DB/$1 DB/purgeable/$1 >/dev/null
rm $1.sync.log >/dev/null

../agents/iguana coins/gen$COINLC.json > $1.sync.log 2>&1 &

MINCONFIRMS=$(cat coins/gen$COINLC.json | python3 -c "import sys, json; print(json.load(sys.stdin)['minconfirms'])")
if [ -z "$MINCONFIRMS" ]; then
    if [[ "${COINLC}" == "btc" ]]; then
        $MINCONFIRMS=3
    else
        $MINCONFIRMS=10
    fi
fi

SECONDS=0
STARTTIME=$(date +%T)
echo " >>> $1 Monitored Synchronization started at $STARTTIME." >> debug.log
echo " >>> Synchronization started at $STARTTIME."
echo " >>> You can follow this synchronization log at $1.sync.log. $1 status lines will also appear in debug.log"
echo " >>> Monitoring the log. Leave this process open to get a report in $RESULTS when $1 is fully synchronized."
echo "$1 synchronization started at $STARTTIME" >> $RESULTS
while sleep .5; do 
    ENDTIME=$(date +%T)
    ps ax | grep "[a]gents/iguana coins/gen$COINLC.json" >/dev/null || { echo -e "\n$1 Synchronization process exited before finishing. Check $1.sync.log for details.\n"; echo "$1 synchronization finished prematurely at $ENDTIME" >> $RESULTS; echo "--------------------------------------------------------" >> $RESULTS; exit 1; }
    LASTLINE=$(tac debug.log |egrep -m 1 .)
    printf 'Time elapsed: %s minutes and %02d%s seconds                               \r' "$(($SECONDS / 60))" "$((SECONDS % 60))"
	if [[ "${LASTLINE}" == "${1}.RT"* ]]; then
            printf '\n Last %s status line: %s \r\033[2A' "$1" "$LASTLINE"
	else
            LASTLINE="COIN.RT0 u.0+c.0 b.0 v.0 (0+0/1 1st.0).s0 to 1 N[1] h.0 r.0 c.0"
	fi
    RTNUMBERPR=${LASTLINE% u.*}
    RTNUMBER=${RTNUMBERPR##*RT}
    HEIGHTPR=${LASTLINE% r.*}
    HEIGHT=${HEIGHTPR##*] h.}
    if [[ "$((RTNUMBER + MINCONFIRMS))" == "$((HEIGHT))" ]]; then
	echo; echo; echo; echo " $1 synchronization finished at $ENDTIME"
	echo " Total synchronization time: $((SECONDS / 3600)) hours, $((($SECONDS % 3600) / 60)) minutes and $((SECONDS % 60)) seconds."
	echo "$1 synchronization ended at $ENDTIME" >> $RESULTS
	echo "Total time: $((SECONDS / 3600)) hours, $((($SECONDS % 3600) / 60)) minutes and $((SECONDS % 60)) seconds" >> $RESULTS
	COMMIT=$(git rev-parse HEAD)
	echo "Running commit: $COMMIT" >> $RESULTS
	echo "--------------------------------------------------------" >> $RESULTS
	exit 0
    fi
done

exit $?
